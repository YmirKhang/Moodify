package moodify.service

import java.net.URI

import com.wrapper.spotify.SpotifyApi
import com.wrapper.spotify.model_objects.specification.PlayHistory
import moodify.Config

/**
  * Communicates with Spotify API.
  */
class SpotifyService extends Config {

  /**
    * List of necessary permissions.
    */
  private val scope = "user-read-recently-played, playlist-modify-public, playlist-modify-private"

  /**
    * Spotify API wrapper instance.
    */
  private val spotifyApi = new SpotifyApi.Builder()
    .setClientId(SPOTIFY_CLIENT_ID)
    .setClientSecret(SPOTIFY_CLIENT_SECRET)
    .setRedirectUri(new URI(SPOTIFY_REDIRECT_URI))
    .build

  /**
    * Authenticate user with given code.
    *
    * @param userId Moodify user id.
    * @param code   The code generated by Spotify for user's authentication.
    * @return Success.
    */
  def authenticate(userId: String, code: String): Boolean = {
    try {
      val authorizationCodeCredentials = spotifyApi.authorizationCode(code)
        .build
        .execute

      val accessToken = authorizationCodeCredentials.getAccessToken
      spotifyApi.setAccessToken(accessToken)

      val refreshToken = authorizationCodeCredentials.getRefreshToken
      spotifyApi.setRefreshToken(refreshToken)

      val redisAccessTokenKey = s"user:$userId:token:access"
      val redisRefreshTokenKey = s"user:$userId:token:refresh"
      val ttl = 30 * 24 * 60 * 60 // 30 days.

      RedisService.set(redisAccessTokenKey, accessToken, ttl)
      RedisService.set(redisRefreshTokenKey, refreshToken, ttl)

      true
    }
    catch {
      case exception: Exception =>
        println(exception.getMessage)
        false
    }
  }

  /**
    * Get recent tracks of current user.
    *
    * @param limit Maximum number of tracks to return.
    * @return Recent tracks.
    */
  def getRecentTracks(limit: Int): Array[PlayHistory] = {
    val recentTracks = spotifyApi.getCurrentUsersRecentlyPlayedTracks
      .limit(limit)
      .build
      .execute
      .getItems

    recentTracks
  }

}
